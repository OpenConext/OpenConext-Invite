---
logging:
  level:
    root: WARN
    com.zaxxer.hikari: ERROR
    org.mariadb.jdbc.message.server: ERROR
    org.springframework.security: INFO
    invite: DEBUG
#    sql: DEBUG
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
#    org.hibernate.orm.jdbc.bind: TRACE
  threshold:
#    console: TRACE
    console: WARN

server:
  port: 8888
  error:
    path: "/error"
    include-message: always
  forward-headers-strategy: framework
  servlet:
    session:
      cookie:
        secure: false

spring:
  main:
    banner-mode: "off"
  session:
    jdbc:
      cleanup-cron: "-"
      initialize-schema: always
    store-type: jdbc
    timeout: 8h
  mvc:
    log-request-details: false
  security:
    oauth2:
      client:
        registration:
          oidcng:
            client-id: playground_client
            client-secret: secret
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: "authorization_code"
            scope: openid
        provider:
          oidcng:
            authorization-uri: "https://connect.test2.surfconext.nl/oidc/authorize"
            token-uri: "https://connect.test2.surfconext.nl/oidc/token"
            user-info-uri: "https://connect.test2.surfconext.nl/oidc/userinfo"
            jwk-set-uri: "https://connect.test2.surfconext.nl/oidc/certs"
            user-name-attribute: sub
            user-info-authentication-method: client_secret_basic
  jpa:
    properties:
      hibernate:
        naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    open-in-view: false
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mysql://localhost/invite?autoReconnect=true&useSSL=false&permitMysqlScheme=true&allowPublicKeyRetrieval=true
    username: invite
    password: secret
  flyway:
    locations: classpath:db/mysql/migration
    fail-on-missing-locations: true
  mail:
    host: localhost
    port: 1025

crypto:
  development-mode: True
  #  private-key-location: classpath:nope
  #  Use the commented lines when you want to test against a remote manage. Do not add the private_key to git
  #  development-mode: False
  private-key-location: classpath:/private_key_pkcs8.pem

cron:
  node-cron-job-responsible: true
  user-cleaner-expression: "0 0/30 * * * *"
  last-activity-duration-days: 1000
  role-expiration-notifier-expression: "0 0/30 * * * *"
  # Set to -1 to suppress role expiry notifications
  role-expiration-notifier-duration-days: 5
  metadata-resolver-initial-delay-milliseconds: 1
  metadata-resolver-fixed-rate-milliseconds: 86_400_000
  metadata-resolver-url: "classpath:/metadata/idps-metadata.xml"

myconext:
  uri: "https://login.test2.eduid.nl/myconext/api/invite/provision-eduid"
  username: invite
  password: secret

oidcng:
  discovery-url: "https://connect.test2.surfconext.nl/oidc/.well-known/openid-configuration"
  introspect-url: "https://connect.test2.surfconext.nl/oidc/introspect"
  resource-server-id: myconext.rs
  resource-server-secret: secret
  base-url: http://localhost:8888

super-admin:
  users:
    - "urn:collab:person:example.com:admin"

institution-admin:
  entitlement: "urn:mace:surfnet.nl:surfnet.nl:sab:role:SURFconextverantwoordelijke"
  organization-guid-prefix: "urn:mace:surfnet.nl:surfnet.nl:sab:organizationGUID:"

gui:
  disclaimer:
    background-color: red
    content: LOCAL

config:
  client-url: "http://localhost:3000"
  welcome-url: "http://localhost:4000"
  server-url: "http://localhost:8888"
  server-welcome-url: "http://localhost:8888"
  eduid-entity-id: "https://login.test2.eduid.nl"
  role-search-required: False
  past-date-allowed: True
  performance-seed-allowed: True
  eduid-idp-schac-home-organization: "test.eduid.nl"

feature:
  enable-performance-seed: False

# We don't encode in-memory passwords, so we need to prefix them with {noop}
external-api-configuration:
  remote-users:
    - username: voot
      password: "secret"
      scopes:
        - voot
    - username: teams
      password: "secret"
      scopes:
        - teams
    - username: aa
      password: "secret"
      scopes:
        - attribute_aggregation
    - username: lifecycle
      password: "secret"
      scopes:
        - lifecycle
    - username: internal
      password: "secret"
      scopes:
        - actuator
    - username: profile
      password: "secret"
      scopes:
        - profile
    - username: sp_dashboard
      displayName: "SP Dashboard"
      password: "secret"
      scopes:
        - sp_dashboard
      applications:
        - manageId: "4"
          manageType: SAML20_SP
    - username: access
      displayName: "Access"
      password: "secret"
      scopes:
        - access
      applications:
        - manageId: "6"
          manageType: OIDC10_RP
    - username: sp_dashboard_local_dev_mode
      displayName: "SP Dashboard"
      password: "secret"
      scopes:
        - sp_dashboard
      applications:
        - manageId: "4"
          manageType: SAML20_SP
      localDevMode: true

voot:
  group_urn_domain: urn:mace:surf.nl:test.surfaccess.nl

email:
  from: "no-reply@surf.nl"
  contactEmail: "access@surf.nl"
  environment: "local"
  enabled: false

# The manage section determines if an external Manage is used to integrate with, or that a predefined, static list
# of applications is loaded to populate the application dropdown in the JS new-role form.
# To disable the integration with an external Manage instance, set enabled to False. When enabled is False the url is
# ignored then and the different manage entities are loaded from json files in `server/src/main/resources/manage`.
# Each *.json file in this directory corresponds with the contents of that specific entity_type.
# To test the provisioning (e.g. SCIM, EVA, Graphp) with real endpoints you can set the manage.local property below to
# True and then the provisioning.local.json file is used which is not in git as it is in .gitignore. You can safely
# configure real users / passwords and test against those. See server/src/main/java/access/manage/ManageConf.java
# and server/src/main/java/access/manage/LocalManage.java to see how it works.
manage:
  enabled: False
#  enabled: False
  url: "https://manage.test2.surfconext.nl"
  user: invite
  password: secret
  # If manage is disabled (e.g. enabled: False) the staticManageDirectory is the directory where the {metadata_type}.json files
  # are located. This can also be an absolute file path, e.g. file:///opt/openconext/invite/manage
  staticManageDirectory: classpath:/manage
#  staticManageDirectory: file:///usr/local/etc/manage

springdoc:
  pathsToMatch: "/api/external/v1/**"
  api-docs:
    path: "/ui/api-docs"
  swagger-ui:
    path: "/ui/api-ui.html"
    operationsSorter: method
    oauth:
      client-id: ${spring.security.oauth2.client.registration.oidcng.client-id}
      client-secret: ${spring.security.oauth2.client.registration.oidcng.client-secret}
      use-basic-authentication-with-access-code-grant: true

management:
  endpoints:
    web:
      exposure:
        include: "health,info,prometheus"
      base-path: "/internal"
  endpoint:
    info:
      access: unrestricted
    health:
      access: unrestricted
      show-details: when_authorized
    prometheus:
      access: unrestricted
    mappings:
      access: none
    metrics:
      access: unrestricted
  info:
    git:
      mode: full

# used by the git plugin
info:
  build:
    artifact: "@project.artifactId@"
    version: "@project.version@"
